server.port=8081


spring.security.oauth2.client.registration.Keycloak.client-id= login-microservice
spring.security.oauth2.client.registration.Keycloak.authorization-grant-type= authorization_code
spring.security.oauth2.client.registration.Keycloak.client-secret= JoIGGcwAfMnK6XygFTjHonv5nCPRAemn
spring.security.oauth2.client.registration.Keycloak.scope= openid

spring.security.oauth2.client.provider.Keycloak.issuer-uri= http://localhost:8080/realms/ExamSystem
spring.security.oauth2.client.provider.Keycloak.authorization-uri= http://localhost:8080/realms/ExamSystem/protocol/openid-connect/auth
spring.security.oauth2.client.provider.Keycloak.token-uri= http://localhost:8080/realms/ExamSystem/protocol/openid-connect/token
spring.security.oauth2.client.provider.Keycloak.user-name-attribute= preferred_username

spring.security.oauth2.resourceserver.jwt.issuer-uri= http://localhost:8080/realms/ExamSystem
spring.security.oauth2.resourceserver.jwt.jwk-set-uri= ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

jwt.auth.converter.resource-id = login-microservice
jwt.auth.converter.principle-attribute = preferred_username

api.url.user= /api/user
api.url.user.login= /login
api.url.user.signup = /signup
api.url.user.logout = /logout

keycloak.info.url = http://localhost:8080
keycloak.info.realm = ExamSystem
keycloak.info.client-id = login-microservice
keycloak.info.client-secrets = JoIGGcwAfMnK6XygFTjHonv5nCPRAemn
Keycloak.info.admin-name = admin
Keycloak.info.admin-password = admin

spring.datasource.url=jdbc:postgresql://localhost:5432/exam-system-users
spring.datasource.username=postgres
spring.datasource.password=3101

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto= update